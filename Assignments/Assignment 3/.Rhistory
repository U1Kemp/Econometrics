network$weights_hidden_output <- network$weights_hidden_output + t(hidden_layer) %*% (output_errors * sigmoid_derivative(output_layer) * network$learning_rate)
network$output_bias <- network$output_bias + colSums(output_errors * sigmoid_derivative(output_layer) * network$learning_rate)
network$weights_input_hidden <- network$weights_input_hidden + t(inputs) %*% (hidden_errors * network$learning_rate)
network$hidden_bias <- network$hidden_bias + colSums(hidden_errors * network$learning_rate)
return(network)
}
# Training function
# This function trains the neural network over multiple epochs using the provided dataset.
train <- function(network, inputs, targets, epochs) {
for (i in seq_len(epochs)) {
for (j in seq_len(nrow(inputs))) {
# Train on each individual sample
network <- backpropagate(network, matrix(inputs[j, ], nrow = 1), matrix(targets[j, ], nrow = 1))
}
}
return(network)
}
# Test function
# Runs the trained network on inputs and prints the results.
test <- function(network, inputs) {
apply(inputs, 1, function(row) {
output <- feedforward(network, matrix(row, nrow = 1))$output_layer
cat("Input:", row, "-> Output:", output, "\n")
})
}
# Define the XOR dataset
# Inputs: Possible binary combinations of (0, 1)
# Targets: Corresponding XOR outputs
inputs <- matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
targets <- matrix(c(0, 1, 1, 0), ncol = 1)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Test the trained network to evaluate its performance
test(network, inputs)
# Test the trained network to evaluate its performance
test(network, inputs)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Define the XOR dataset
# Inputs: Possible binary combinations of (0, 1)
# Targets: Corresponding XOR outputs
inputs <- matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
targets <- matrix(c(0, 1, 1, 0), ncol = 1)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Define the XOR dataset
# Inputs: Possible binary combinations of (0, 1)
# Targets: Corresponding XOR outputs
inputs <- matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
targets <- matrix(c(0, 1, 1, 0), ncol = 1)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Define the XOR dataset
# Inputs: Possible binary combinations of (0, 1)
# Targets: Corresponding XOR outputs
inputs <- matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
targets <- matrix(c(0, 1, 1, 0), ncol = 1)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 10000)
# Test the trained network to evaluate its performance
test(network, inputs)
# Define the XOR dataset
# Inputs: Possible binary combinations of (0, 1)
# Targets: Corresponding XOR outputs
inputs <- matrix(c(0, 0, 0, 1, 1, 0, 1, 1), ncol = 2, byrow = TRUE)
targets <- matrix(c(0, 1, 1, 0), ncol = 1)
# Initialize the neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
network <- initialize_network(2, 2, 1)
# Train the network for 10,000 epochs to learn the XOR function
network <- train(network, inputs, targets, 20000)
# Test the trained network to evaluate its performance
test(network, inputs)
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
ls
?ls
docker
cd
pwd
getwd
getwd()
q()
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
source("C:/Users/utpal/Documents/Notes/Projects/Random/NN in R.R")
q()
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution") {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
plot(x, y,
type = "l",  # Line plot
xlab = "x",
ylab = "Density",
main = title,
col = "blue",
lwd = 2) # Line width
}
plot.new()
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, title = "Posterior Distribution for n = 100")
# plot for n = 1000
plot_beta(alpha = 192, beta = 818, title = "Posterior Distribution for n = 1000")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue") {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Check if this is the first plot.  If so, create a new plot.  Otherwise, add to the existing plot.
if (par("new")) {
plot(x, y,
type = "l",
xlab = "x",
ylab = "Density",
main = title,
col = color,
lwd = 2)
} else {
lines(x, y, col = color, lwd = 2)
}
}
# Create a new plot and plot the first Beta distribution
plot_beta(alpha = 21, beta = 89, title = "Posterior Distributions for n = 100 and n = 1000", color = "blue")
# Create a new plot and plot the first Beta distribution
plot_beta(alpha = 21, beta = 89, title = "Posterior Distributions for n = 100 and n = 1000", color = "blue")
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "x",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, title = "Posterior Distributions", color = "blue")
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, color = "red", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "x",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, color = "red", add = TRUE)
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, title = "Posterior Distributions", color = "blue")
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "x",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, color = "red", add = TRUE)
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, title = "Posterior Distributions", color = "blue")
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "x",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 2000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 20000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 200000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 100)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 10000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
pwd
getwd
getwd()
getwd()
curve(dbeta(x,192,818)from= 0, to = 1)
dbeta
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
getwd()
setwd
setwd()
setwd(~/)
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 10000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
source("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3/Code.R")
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 10000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 818, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 89, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
q()
getwd()
setwd("C:\Users\utpal\Documents\Notes\Projects\Econometrics\Assignments\Assignment 3")
setwd("C:/Users/utpal/Documents/Notes/Projects/Econometrics/Assignments/Assignment 3")
getwd
getwd()
# Function to plot Beta distribution
plot_beta <- function(alpha, beta, title = "Beta Distribution", color = "blue", add = FALSE) {
# Create a sequence of x values for plotting
x <- seq(0, 1, length.out = 10000)
# Calculate the density of the Beta distribution
y <- dbeta(x, alpha, beta)
# Plot the distribution
if (add) {
lines(x, y, col = color, lwd = 2) # Add to existing plot
} else {
plot(x, y,
type = "l",  # Line plot
xlab = "theta_1",
ylab = "Density",
main = title,
col = color,
lwd = 2) # Line width
}
}
# plot for n = 1000, overlaying the previous plot.
plot_beta(alpha = 192, beta = 820, title = "Posterior Distributions", color = "red")
# Plot for n = 100
plot_beta(alpha = 21, beta = 91, color = "blue", add = TRUE)
#add legend
legend("topright", legend = c("n=100", "n=1000"), col = c("blue", "red"), lty = 1)
q()
